===Синтаксис spread и rest===
---
В современном стандарте появился новый синтаксис для работы с итерируемыми сущностями, 
такими как строка, массив или объект. Его функционал и название зависит от места применения.
---
===spread: передача аргументов===
---
Операция ... (spread) позволяет распылить коллекцию элементов (массив, строку или объект) в место, 
где ожидается набор отдельных значений. 
Конечно есть некоторые ограничения, например нельзя распылить массив в объект и наоборот.
---
Можно привести аналогию с ящиком яблок. 
Поставив ящик на пол не вынимая из него яблоки, 
получим аналог массива значений. 
Если высыпать яблоки из ящика на пол, 
произойдёт распыление - набор отдельных значений.
---
Отличие всего одно - в JavaScript распыление не изменяет оригинальную коллекцию, 
то есть делается копия каждого элемента. 
После распыления останется и ящик полный яблок, 
и копия каждого яблока на полу.
---
Например, метод Math.max(аргументы) ищет и возвращает самый большой из аргументов (чисел), 
то есть ожидает не массив значений, а произвольное количество аргументов.
---
const temps = [14, -4, 25, 8, 11];

// В консоли будет массив
console.log(temps);
// ❌ Так не сработает, потому что передаём целый массив
console.log(Math.max(temps)); // NaN

// В консоли будет набор отдельных чисел
console.log(...temps);
// ✅ Распылим коллекцию элементов как отдельные аргументы
console.log(Math.max(...temps)); // 25
---
То есть запись Math.max(...[14, -4, 25, 8, 11]), 
после интерпретации превращается в Math.max(14, -4, 25, 8, 11) - синтаксис ... возвращает распакованный массив, 
то есть распыляет его элементы как отдельные аргументы.
---
===spread: создание нового массива===
---
Операция ... (spread) позволяет создать копию массива или «склеить» произвольное количество массивов в один новый. 
Раньше для этого использовали методы slice() и concat(), 
но операция распыления позволяет сделать тоже самое в более краткой форме.
---
const temps = [14, -4, 25, 8, 11];

// Это точная, но независимая копия массива temps
const copyOfTemps = [...temps];
console.log(copyOfTemps); // [14, -4, 25, 8, 11]
---
В примере выше у нас есть ящик яблок temps и мы хотим сделать его точную копию. 
Берём пустой ящик и пересыпаем в него яблоки из исходного ящика temps - распыляем его в другую коллекцию. 
При этом ящик temps не изменится, в нём все ещё будут яблоки, 
а в новом ящике - их точные копии.
---
В следующем примере мы ссыпаем яблоки из двух ящиков в один новый. 
Оригинальные ящики (массивы) не изменятся, 
а в новом будут копии всех их яблок (элементов). 
Порядок распыления важен - он влияет на порядок элементов в новой коллекции.
---
const lastWeekTemps = [14, 25, 11];
const currentWeekTemps = [23, 17, 18];
const allTemps = [...lastWeekTemps, ...currentWeekTemps];
console.log(allTemps); // [14, 25, 11, 23, 17, 18]
---
===spread: создание нового объекта===
---
Операция ... (spread) позволяет распылить свойства произвольного количества объектов в один новый.
---
const first = { propA: 5, propB: 10 };
const second = { propC: 15 };
const third = { ...first, ...second };
console.log(third); // { propA: 5, propB: 10, propC: 15 }
---
Порядок распыления имеет значение. 
Имена свойств объекта уникальные, 
поэтому свойства распыляемого объекта могут перезаписать значение уже существующего свойства, 
если их имена совпадают.
---
const first = { propA: 5, propB: 10, propC: 50 };
const second = { propC: 15, propD: 20 };

const third = { ...first, ...second };
console.log(third); // { propA: 5, propB: 10, propC: 15, propD: 20 }

const fourth = { ...second, ...first };
console.log(fourth); // { propA: 5, propB: 10, propC: 50, propD: 20 }
---
Если бы яблоки в ящике имели наклейки с метками, 
то в одном ящике не может быть двух яблок с одинаковыми метками. 
Поэтому при пересыпании второго ящика, все яблоки, 
метки которых совпадут с теми что уже есть в новом, 
заменят те что уже есть.
---
Во время распыления можно добавлять свойства в произвольное место. 
Главное помнить про уникальность имени свойства и о том, 
что его значение может быть перезаписано.
---
const first = { propA: 5, propB: 10, propC: 50 };
const second = { propC: 15 };

const third = { propB: 20, ...first, ...second };
console.log(third); // { propA: 5, propB: 10, propC: 15 }

const fourth = { ...first, ...second, propB: 20 };
console.log(fourth); // { propA: 5, propB: 20, propC: 15 }

const fifth = { ...first, propB: 20, ...second };
console.log(fifth); // { propA: 5, propB: 20, propC: 15 }
---
===rest: сбор всех аргументов функции===
---
Операция ... (rest) позволяет собрать группу независимых элементов в новую коллекцию. 
Синтаксически это близнец операции распыления, 
но отличить их просто - распыление это когда ... находится в правой части операции присваивания, 
а сбор это когда ... находится в её левой части.
---
Вернёмся к аналогии с яблоками. Если на полу лежат яблоки и у нас есть пустой ящик, 
то операция rest позволит «собрать» яблоки в ящик. 
При этом оригинальные яблоки останутся на полу, 
а в ящике будет копия каждого яблока.
---
Одна из областей применения операции rest 
это создание функций которые могут принимать произвольное количество аргументов.
---
// Как объявить параметры функции так,
// чтобы можно было передать любое кол-во аргументов?
function multiply() {
  // ...
}

multiply(1, 2);
multiply(1, 2, 3);
multiply(1, 2, 3, 4);
---
Если убрать весь «синтаксический шум» и посмотреть на аргументы и параметры функции, 
то аргументы находятся в правой части операции присваивания, 
а параметры в левой, потому что значения аргументов присваиваются объявленным параметрам. 
Значит можно «собрать» все аргументы функции в один параметр используя операцию rest.
---
function multiply(...args) {
  console.log(args); // массив всех аргументов
}

multiply(1, 2);
multiply(1, 2, 3);
multiply(1, 2, 3, 4);
---
Имя параметра может быть произвольным. 
Чаще всего его называют args, restArgs или otherArgs, 
сокращённое от arguments.
---
===rest: сбор части аргументов функции===
---
Операция ... (rest) также позволяет собрать в массив только ту часть аргументов, 
которая необходима, объявив параметры до «сбора».
---
function multiply(firstNumber, secondNumber, ...otherArgs) {
  console.log(firstNumber); // Значение первого аргумента
  console.log(secondNumber); // Значение второго аргумента
  console.log(otherArgs); // Массив остальных аргументов
}

multiply(1, 2);
multiply(1, 2, 3);
multiply(1, 2, 3, 4);
---
Все агументы, для которых будут объявлены параметры, 
передадут им свои значения, остальные аргументы будут помещены в массив. 
Операция rest собирает все оставшиеся аргументы 
и поэтому должна идти последней в подписи функции, иначе будет ошибка.
---
