===Объекты===
---
Объекты позволяют описать и сгруппировать характеристики некоторой сущности - пользователя, 
книги, продукта в магазине, чего угодно. Объекты ещё называют словарями, 
то есть они содержат термины (свойства) и их определения (значения).
---
===Создание объекта===
---
Для объявления используются фигурные скобки {} - литерал объекта.
---
const book = {
  title: "The Last Kingdom",
  author: "Bernard Cornwell",
  genres: ["historical prose", "adventure"],
  isPublic: true,
  rating: 8.38,
};
---
При создании объекту можно добавить свойства, каждое из которых описывается парами ключ:значение. 
Ключ ещё называют именем свойства и это всегда строка. 
Значением свойства могут быть любые типы: примитивы, массивы, 
объекты, були, функции и т. п. Свойства разделяются запятой.
---
Правила именования ключей просты:
---
- Если ключ заключен в кавычки, то это может быть произвольная строка.
- Если кавычек нет, то вступают ограничения - имя без пробелов, начинается на букву или символы _ и $.
---
===Вложенные свойства===
---
Значением свойства может быть другой объект, для того чтобы хранить вложенные и группированные данные. 
Например, статистика пользователя социальной сети состоит из количества последователей, 
просмотров и лайков, и хранить эти данные удобнее всего в виде объекта. 
Тоже самое с местоположением, отдельно страна и город.
---
const user = {
  name: "Jacques Gluke",
  tag: "jgluke",
  location: {
    country: "Jamaica",
    city: "Ocho Rios",
  },
  stats: {
    followers: 5603,
    views: 4827,
    likes: 1308,
  },
};
---
В будущем это можно будет использовать для поиска пользователей по стране, 
городу, минимальному или максимальному количеству последователей и т. д.
---
Обращение к свойствам через точку
---
Первый способ получить доступ к свойству объекта это синтаксис обьект.имя_свойства. 
Синтаксис «через точку» используется в большинстве случаев и подходит тогда, 
когда мы заранее знаем имя (ключ) свойства к которому хотим получить доступ.
---
- На место обращения будет возвращено значение свойства с таким именем.
- Если в объекте нет свойства с таким именем, на место обращения вернётся undefined.
---
const book = {
  title: "The Last Kingdom",
  author: "Bernard Cornwell",
  genres: ["historical prose", "adventure"],
  isPublic: true,
  rating: 8.38,
};

const bookTitle = book.title;
console.log(bookTitle); // 'The Last Kingdom'
const bookGenres = book.genres;
console.log(bookGenres); // ['historical prose', 'adventurs']
const bookPrice = book.price;
console.log(bookPrice); // undefined
---
Обращение к вложенным свойствам
---
Для доступа к вложенным свойствам используется цепочка обращейний «через точку». 
Например, если необходимо получить значение страны пользователя, записываем user.location.country, 
где user.location это обращение (путь) к объекту в свойстве location, 
а user.locaton.country обращение к свойству country в этом объекте. То есть «точка» указывает следующую вложенность.
---
const user = {
  name: "Jacques Gluke",
  tag: "jgluke",
  location: {
    country: "Jamaica",
    city: "Ocho Rios",
  },
  hobbies: ["swiming", "music", "sci-fi"],
};
const location = user.location;
console.log(location); // Объект location
const country = user.location.country;
console.log(country); // 'Jamaica'
---
Если значение свойства это массив, то в нашем примере user.hobbies обращение к этому массиву.
Далее можно получить доступ к его элементам через квадратные скобки 
и индекс или использовать свойства и методы.
---
const hobbies = user.hobbies;
console.log(hobbies); // ['swiming', 'music', 'sci-fi']
const firstHobby = user.hobbies[0];
console.log(firstHobby); // 'swiming'
const numberOfHobbies = user.hobbies.length;
console.log(numberOfHobbies); // 3
---
===Обращение к свойствам через квадратные скобки===
---
Второй способ получить доступ к свойству объекта это синтаксис обьект["имя свойства"]. 
Похоже на обращение к элементу массива с отличием в том, 
что в скобках указывается не индекс элемента, а имя свойства как строка.
---
Синтаксис «квадратных скобок» используется значительно реже, 
в случае когда имя свойства заранее неизвестно или хранится в переменной, 
например как значение параметра функции.
---
На место обращения будет возвращено значение свойства с таким именем.
Если в объекте нет свойства с таким именем, на место обращения вернётся undefined.
---
const book = {
  title: "The Last Kingdom",
  author: "Bernard Cornwell",
  genres: ["historical prose", "adventure"],
  isPublic: true,
  rating: 8.38,
};
const bookTitle = book["title"];
console.log(bookTitle); // 'The Last Kingdom'
const bookGenres = book["genres"];
console.log(bookGenres); // ['historical prose', 'adventurs']
const propKey = "author";
const bookAuthor = book[propKey];
console.log(bookAuthor); // 'Bernard Cornwell'
---
===Изменение значения свойства===
---
После того как объект создан, значение его свойств можно изменить. 
Для этого необходимо обратиться к ним по имени, 
например «через точку», и присвоить новое значение.
---
const book = {
  title: "The Last Kingdom",
  author: "Bernard Cornwell",
  genres: ["historical prose", "adventure"],
  isPublic: true,
  rating: 8.38,
};

book.rating = 9;
book.isPublic = false;
book.genres.push("драма");

console.log(book.rating); // 9
console.log(book.isPublic); // false
console.log(book.genres); // ['historical prose', 'adventures', 'драма']
---
===Добавление свойств===
---
Операция добавления нового свойства после создания объекта ничем 
не отличается от изменения значения уже существующего свойства. 
Если при записи значения по имени, такого свойства в объекте нет, оно будет создано.
---
const book = {
  title: "The Last Kingdom",
  author: "Bernard Cornwell",
  genres: ["historical prose", "adventure"],
  isPublic: true,
  rating: 8.38,
};

book.pageCount = 836;
book.originalLanguage = "en";
book.translations = ["ua", "ru"];

console.log(book.pageCount); // 836
console.log(book.originalLanguage); // 'en'
console.log(book.translations); // ['ua', 'ru']
---
===Короткие свойства===
---
Иногда при создании объекта значение свойства необходимо взять из переменной 
или параметра функции с таким же именем как и само свойство.
---
Синтксис в следующем примере слишком громоздкий, 
потому что приходится дублировать имя свойства 
и имя переменной в которой хранится необходимое значение.
---
const name = "Генри Сибола";
const age = 25;

const user = {
  name: name,
  age: age,
};

console.log(user.name); // "Генри Сибола"
console.log(user.age); // 25
---
Синтаксис коротких свойств (shorthand properties) решает эту проблему, 
позволяя использовать имя переменной как имя свойства, 
а её значение как значение свойства.
---
const name = "Генри Сибола";
const age = 25;

const user = {
  name,
  age,
};

console.log(user.name); // "Генри Сибола"
console.log(user.age); // 25
---
То есть при объявлении объекта достаточно указать только имя свойства, 
а значение будет взято из переменной с аналогичным именем.
---
===Вычисляемые свойства===
---
Бывают ситуации когда при объявлении обьекта необходимо добавить свойство с именем которое мы заранее не знаем, 
потому что оно хранится как значение переменной или как результат выполнения функции.
---
Раньше для этого необходимо было сначала создать объект, 
а потом добавлять свойства через квадратные скобки, что не совсем удобно.
---
const propName = "name";
const user = {
  age: 25,
};

user[propName] = "Генри Сибола";
console.log(user.name); // 'Генри Сибола'
---
Синтаксис вычисляемых свойств (computed properties) помогает избежать лишнего кода 
и в некоторых случаях упростить его. 
Значением вычисляемого свойства может быть любое валидное выражение.
---
const propName = "name";
const user = {
  age: 25,
  // Имя этого свойства будет взято из значения переменной propName
  [propName]: "Генри Сибола",
};

console.log(user.name); // 'Генри Сибола'
---
===Методы объекта===
---
До сих пор мы рассматривали объекты только как хранилища взаимосвязанных данных, 
например информация о книге и т. п. 
Объекты-хранилища обычно находятся в массиве таких же объектов, 
который представляет коллекцию однотипных элементов.
---
Объекты могут хранить не только данные, 
но и функции для работы с этими данными - методы. 
Если значение свойства это функция, такое свойство называется методом объекта.
---
// ✅ Логически и синтаксически сгруппированные сущности
const bookShelf = {
  books: ["The Last Kingdom", "Dream Guardian"],
  // Это метод объекта
  getBooks() {
    console.log("Этот метод будет возвращать все книги - свойство books");
  },
  // Это метод объекта
  addBook(bookName) {
    console.log("Этот метод будет добавлять новую книгу в свойство books");
  },
};

// Вызовы методов
bookShelf.getBooks();
bookShelf.addBook("Новая книга");
---
Такие объекты можно назвать «моделями». 
Они связывают данные и методы для работы с этими данными. 
Например, можно было объявить переменную books и две функции getBooks() и addBook(bookName), 
но тогда это были бы три независимые сущности без явной синтаксической, 
и со слабой логической связью.
---
// ❌ Слабосвязанные, независмые сущности
const books = [];
function getBooks() {}
function addBook() {}
---
===Доступ к свойствам объекта в методах===
---
Методы используются для работы со свойствами объекта, их изменения. 
Для доступа к объекту в методе используется не имя переменной, 
например bookShelf, а ключевое слово this - контекст. 
Значением this будет объект перед «точкой», 
то есть объект который вызвал этот метод, 
в нашем случае это ссылка на объект bookShelf.
---
const bookShelf = {
  books: ["The Last Kingdom"],
  getBooks() {
    console.log(this);
  },
};

// Перед точкой стоит объект bookShelf,
// поэтому при вызове метода, this будет хранить ссылку на него.
bookShelf.getBooks(); // {books: ['The Last Kingdom'], getBooks: f}
---
Для того чтобы получить доступ к свойствам объекта в методах, 
мы обращаемся к нему через this и дальше как обычно - «через точку» к свойствам.
---
const bookShelf = {
  books: ["The Last Kingdom"],
  getBooks() {
    return this.books;
  },
  addBook(bookName) {
    this.books.push(bookName);
  },
  removeBook(bookName) {
    const bookIndex = this.books.indexOf(bookName);
    this.books.splice(bookIndex, 1);
  },
};

console.log(bookShelf.getBooks()); // ["The Last Kingdom"]
bookShelf.addBook("The Mist");
bookShelf.addBook("Dream Guardian");
console.log(bookShelf.getBooks()); // ['The Last Kingdom', 'The Mist', 'Dream Guardian']
bookShelf.removeBook("The Mist");
console.log(bookShelf.getBooks()); // ['The Last Kingdom', 'Dream Guardian']
---
Будет логично задуматься - почему бы не использовать при обращении к свойствам имя объекта, 
ведь мы явно не собираемся его менять. 
Дело в том, что имя объекта штука ненадежная, 
методы одного объекта можно копировать в другой (с другим именем), 
а в будущем узнаем что часто при создании объекта мы заранее вовсе не знаем имени.
Использование this гарантирует, что метод работает именно с тем объектом, который его вызвал.
---
ИНТЕРЕСНО
Мы детально разберем ключевое слово this и все его подводные камни в следующих занятиях, 
а сейчас достаточно просто использовать this при обращении к свойствами объекта в его методах.
---